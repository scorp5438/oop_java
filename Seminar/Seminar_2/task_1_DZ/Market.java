package Seminar.Seminar_2.task_1;

import java.util.LinkedList;
import java.util.List;

// <aside>
// üìî –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∞ —Å–ª–∞–π–¥–µ ‚Äú–∑–∞–¥–∞–Ω–∏–µ 2‚Äù –≤ –≤–∏–¥–µ uml –¥–∏–∞–≥—Ä–∞–º–º—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤, –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

// 1. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å QueueBehaviour, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ ‚Äì –ø–æ–º–µ—â–µ–Ω–∏–µ –≤/–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞
// 2. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å MarketBehaviour, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äì –ø—Ä–∏—Ö–æ–¥/—É—Ö–æ–¥ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
// 3. –ö–ª–∞—Å—Å Market, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ—Ç –¥–≤–∞ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
// </aside>

// –î–ó:
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Market –∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å.
// –ú–µ—Ç–æ–¥—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ QueueBehaviour, –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É –æ—á–µ—Ä–µ–¥–∏, MarketBehaviour ‚Äì –ø–æ–º–µ—â–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –º–µ—Ç–æ–¥ update ‚Äì –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ—Ç–¥–∞—ë—Ç –∑–∞–∫–∞–∑—ã)

// –§–æ—Ä–º–∞—Ç —Å–¥–∞—á–∏: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ç—Ö–∞–± –ø—Ä–æ–µ–∫—Ç

public class Market implements QueueBehaviour, MarketBehaviour {
    public List<Actor> actors = new LinkedList<>();

    @Override
    public void takeInQueue(Actor actor) { // –∑–∞–Ω—è—Ç—å –æ—á–µ—Ä–µ–¥—å
        actors.addLast(actor);
    }

    @Override
    public void takeOrders() { // –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã
        System.out.printf("%s –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ\n", actors.get(0));
        giveOrders();
    }

    @Override
    public void giveOrders() { // –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã
        System.out.printf("%s –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑\n", actors.get(0));
        releaseFromQueue();
    }

    @Override
    public void releaseFromQueue() { // –≤—ã–ø—É—Å—Ç–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        System.out.printf("%s –î–æ —Å–≤–∏–¥–∞–Ω–∏—è\n", actors.get(0));
    }

    @Override
    public void acceptToMarket(Actor actor) { // –ø—Ä–∏–Ω—è—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫
        if (actor.isMakeOrder() && actor.isTakeOrder()) {
            takeOrders();
        } else {
            System.out.printf("%s –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç\n", actors.get(0));
        }
        // update();

    }

    @Override
    public void releaseFromMarket(List<Actor> actors) { // –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞
        actors.removeFirst();
        update();
    }

    @Override
    public void update() { // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (!actors.isEmpty()) {
            acceptToMarket(actors.get(0));
            releaseFromMarket(actors);
        } else {
            System.out.printf("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞...");
        }
    }

}