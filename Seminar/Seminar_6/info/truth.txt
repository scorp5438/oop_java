Принцип единственной ответственности (Single Responsibility Principle - SRP):

Каждый класс должен иметь только одну причину для изменения.
Класс должен быть ответственен только за одну функцию, процесс или поведение.
//
Принцип открытости/закрытости (Open/Closed Principle - OCP):

Программные сущности должны быть открыты для расширения, но закрыты для модификации.
Это означает, что поведение сущности должно быть расширяемым без изменения ее исходного кода.
//
Принцип подстановки Барбары Лисков (Liskov Substitution Principle - LSP):

Объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.
Это означает, что подклассы должны быть способны заменить свои базовые классы без изменения ожидаемого поведения программы.
//
Принцип разделения интерфейса (Interface Segregation Principle - ISP):

Клиенты не должны зависеть от интерфейсов, которые они не используют.
Это означает, что интерфейсы должны быть маленькими и специфичными для клиентов, которые их используют, чтобы избежать наличия неиспользуемых методов.
//
Принцип инверсии зависимостей (Dependency Inversion Principle - DIP):

Модули верхнего уровня не должны зависеть от модулей нижнего уровня. Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
Этот принцип обычно реализуется с помощью внедрения зависимостей, инверсии управления и использования интерфейсов.